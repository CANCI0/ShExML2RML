/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use rustemo::regex::Regex;
use rustemo::once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use super::shexml_actions;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use rustemo::colored::*;
pub type Input = str;
const STATE_COUNT: usize = 102usize;
const MAX_RECOGNIZERS: usize = 6usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 23usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    PrefixLiteral,
    SourceLiteral,
    IteratorLiteral,
    FieldLiteral,
    ExpressionLiteral,
    UnionLiteral,
    OpenTag,
    CloseTag,
    OpenBrace,
    CloseBrace,
    OpenBracket,
    CloseBracket,
    AtSign,
    Dots,
    Semicolon,
    Namespace,
    Identifier,
    PathLiteral,
    Path,
    ShapePath,
    Uri,
    Dot,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    ShexmlP1,
    Prefix1P1,
    Prefix1P2,
    Prefix0P1,
    Prefix0P2,
    Source1P1,
    Source1P2,
    Source0P1,
    Source0P2,
    Iterator1P1,
    Iterator1P2,
    Iterator0P1,
    Iterator0P2,
    Expression1P1,
    Expression1P2,
    Expression0P1,
    Expression0P2,
    Shape1P1,
    Shape1P2,
    Shape0P1,
    Shape0P2,
    PrefixP1,
    SourceP1,
    ExpressionP1,
    IteratorFileRelation1P1,
    IteratorFileRelation1P2,
    IteratorFileRelationP1,
    IteratorP1,
    Attribute1P1,
    Attribute1P2,
    NestedIterator1P1,
    NestedIterator1P2,
    NestedIterator0P1,
    NestedIterator0P2,
    NestedIteratorP1,
    AttributeP1,
    ShapeP1,
    PredicateObject1P1,
    PredicateObject1P2,
    PredicateObject0P1,
    PredicateObject0P2,
    SubjectP1,
    ClassP1,
    SubjectIdentifierP1,
    NamespaceOptP1,
    NamespaceOptP2,
    PredicateObjectP1,
    PredicateP1,
    ObjectP1,
    ObjectP2,
    DataValueP1,
    ReferenceP1,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ShexmlP1 => "Shexml: Prefix0 Source0 Iterator0 Expression0 Shape0",
            ProdKind::Prefix1P1 => "Prefix1: Prefix1 Prefix",
            ProdKind::Prefix1P2 => "Prefix1: Prefix",
            ProdKind::Prefix0P1 => "Prefix0: Prefix1",
            ProdKind::Prefix0P2 => "Prefix0: ",
            ProdKind::Source1P1 => "Source1: Source1 Source",
            ProdKind::Source1P2 => "Source1: Source",
            ProdKind::Source0P1 => "Source0: Source1",
            ProdKind::Source0P2 => "Source0: ",
            ProdKind::Iterator1P1 => "Iterator1: Iterator1 Iterator",
            ProdKind::Iterator1P2 => "Iterator1: Iterator",
            ProdKind::Iterator0P1 => "Iterator0: Iterator1",
            ProdKind::Iterator0P2 => "Iterator0: ",
            ProdKind::Expression1P1 => "Expression1: Expression1 Expression",
            ProdKind::Expression1P2 => "Expression1: Expression",
            ProdKind::Expression0P1 => "Expression0: Expression1",
            ProdKind::Expression0P2 => "Expression0: ",
            ProdKind::Shape1P1 => "Shape1: Shape1 Shape",
            ProdKind::Shape1P2 => "Shape1: Shape",
            ProdKind::Shape0P1 => "Shape0: Shape1",
            ProdKind::Shape0P2 => "Shape0: ",
            ProdKind::PrefixP1 => "Prefix: PrefixLiteral Namespace OpenTag Uri CloseTag",
            ProdKind::SourceP1 => "Source: SourceLiteral Identifier OpenTag Uri CloseTag",
            ProdKind::ExpressionP1 => {
                "Expression: ExpressionLiteral Identifier OpenTag IteratorFileRelation1 CloseTag"
            }
            ProdKind::IteratorFileRelation1P1 => {
                "IteratorFileRelation1: IteratorFileRelation1 UnionLiteral IteratorFileRelation"
            }
            ProdKind::IteratorFileRelation1P2 => {
                "IteratorFileRelation1: IteratorFileRelation"
            }
            ProdKind::IteratorFileRelationP1 => {
                "IteratorFileRelation: Identifier Dot Identifier"
            }
            ProdKind::IteratorP1 => {
                "Iterator: IteratorLiteral Identifier OpenTag PathLiteral Path CloseTag OpenBrace Attribute1 NestedIterator0 CloseBrace"
            }
            ProdKind::Attribute1P1 => "Attribute1: Attribute1 Attribute",
            ProdKind::Attribute1P2 => "Attribute1: Attribute",
            ProdKind::NestedIterator1P1 => {
                "NestedIterator1: NestedIterator1 NestedIterator"
            }
            ProdKind::NestedIterator1P2 => "NestedIterator1: NestedIterator",
            ProdKind::NestedIterator0P1 => "NestedIterator0: NestedIterator1",
            ProdKind::NestedIterator0P2 => "NestedIterator0: ",
            ProdKind::NestedIteratorP1 => {
                "NestedIterator: IteratorLiteral Identifier OpenTag Path CloseTag OpenBrace Attribute1 NestedIterator0 CloseBrace"
            }
            ProdKind::AttributeP1 => {
                "Attribute: FieldLiteral Identifier OpenTag Path CloseTag"
            }
            ProdKind::ShapeP1 => "Shape: Subject OpenBrace PredicateObject0 CloseBrace",
            ProdKind::PredicateObject1P1 => {
                "PredicateObject1: PredicateObject1 PredicateObject"
            }
            ProdKind::PredicateObject1P2 => "PredicateObject1: PredicateObject",
            ProdKind::PredicateObject0P1 => "PredicateObject0: PredicateObject1",
            ProdKind::PredicateObject0P2 => "PredicateObject0: ",
            ProdKind::SubjectP1 => "Subject: Class SubjectIdentifier",
            ProdKind::ClassP1 => "Class: Namespace Identifier",
            ProdKind::SubjectIdentifierP1 => {
                "SubjectIdentifier: NamespaceOpt OpenBracket ShapePath CloseBracket"
            }
            ProdKind::NamespaceOptP1 => "NamespaceOpt: Namespace",
            ProdKind::NamespaceOptP2 => "NamespaceOpt: ",
            ProdKind::PredicateObjectP1 => "PredicateObject: Predicate Object Semicolon",
            ProdKind::PredicateP1 => "Predicate: Namespace Identifier",
            ProdKind::ObjectP1 => "Object: DataValue",
            ProdKind::ObjectP2 => "Object: Reference",
            ProdKind::DataValueP1 => {
                "DataValue: NamespaceOpt OpenBracket ShapePath CloseBracket"
            }
            ProdKind::ReferenceP1 => "Reference: AtSign Dots Identifier",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Shexml,
    Prefix1,
    Prefix0,
    Source1,
    Source0,
    Iterator1,
    Iterator0,
    Expression1,
    Expression0,
    Shape1,
    Shape0,
    Prefix,
    Source,
    Expression,
    IteratorFileRelation1,
    IteratorFileRelation,
    Iterator,
    Attribute1,
    NestedIterator1,
    NestedIterator0,
    NestedIterator,
    Attribute,
    Shape,
    PredicateObject1,
    PredicateObject0,
    Subject,
    Class,
    SubjectIdentifier,
    NamespaceOpt,
    PredicateObject,
    Predicate,
    Object,
    DataValue,
    Reference,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ShexmlP1 => NonTermKind::Shexml,
            ProdKind::Prefix1P1 => NonTermKind::Prefix1,
            ProdKind::Prefix1P2 => NonTermKind::Prefix1,
            ProdKind::Prefix0P1 => NonTermKind::Prefix0,
            ProdKind::Prefix0P2 => NonTermKind::Prefix0,
            ProdKind::Source1P1 => NonTermKind::Source1,
            ProdKind::Source1P2 => NonTermKind::Source1,
            ProdKind::Source0P1 => NonTermKind::Source0,
            ProdKind::Source0P2 => NonTermKind::Source0,
            ProdKind::Iterator1P1 => NonTermKind::Iterator1,
            ProdKind::Iterator1P2 => NonTermKind::Iterator1,
            ProdKind::Iterator0P1 => NonTermKind::Iterator0,
            ProdKind::Iterator0P2 => NonTermKind::Iterator0,
            ProdKind::Expression1P1 => NonTermKind::Expression1,
            ProdKind::Expression1P2 => NonTermKind::Expression1,
            ProdKind::Expression0P1 => NonTermKind::Expression0,
            ProdKind::Expression0P2 => NonTermKind::Expression0,
            ProdKind::Shape1P1 => NonTermKind::Shape1,
            ProdKind::Shape1P2 => NonTermKind::Shape1,
            ProdKind::Shape0P1 => NonTermKind::Shape0,
            ProdKind::Shape0P2 => NonTermKind::Shape0,
            ProdKind::PrefixP1 => NonTermKind::Prefix,
            ProdKind::SourceP1 => NonTermKind::Source,
            ProdKind::ExpressionP1 => NonTermKind::Expression,
            ProdKind::IteratorFileRelation1P1 => NonTermKind::IteratorFileRelation1,
            ProdKind::IteratorFileRelation1P2 => NonTermKind::IteratorFileRelation1,
            ProdKind::IteratorFileRelationP1 => NonTermKind::IteratorFileRelation,
            ProdKind::IteratorP1 => NonTermKind::Iterator,
            ProdKind::Attribute1P1 => NonTermKind::Attribute1,
            ProdKind::Attribute1P2 => NonTermKind::Attribute1,
            ProdKind::NestedIterator1P1 => NonTermKind::NestedIterator1,
            ProdKind::NestedIterator1P2 => NonTermKind::NestedIterator1,
            ProdKind::NestedIterator0P1 => NonTermKind::NestedIterator0,
            ProdKind::NestedIterator0P2 => NonTermKind::NestedIterator0,
            ProdKind::NestedIteratorP1 => NonTermKind::NestedIterator,
            ProdKind::AttributeP1 => NonTermKind::Attribute,
            ProdKind::ShapeP1 => NonTermKind::Shape,
            ProdKind::PredicateObject1P1 => NonTermKind::PredicateObject1,
            ProdKind::PredicateObject1P2 => NonTermKind::PredicateObject1,
            ProdKind::PredicateObject0P1 => NonTermKind::PredicateObject0,
            ProdKind::PredicateObject0P2 => NonTermKind::PredicateObject0,
            ProdKind::SubjectP1 => NonTermKind::Subject,
            ProdKind::ClassP1 => NonTermKind::Class,
            ProdKind::SubjectIdentifierP1 => NonTermKind::SubjectIdentifier,
            ProdKind::NamespaceOptP1 => NonTermKind::NamespaceOpt,
            ProdKind::NamespaceOptP2 => NonTermKind::NamespaceOpt,
            ProdKind::PredicateObjectP1 => NonTermKind::PredicateObject,
            ProdKind::PredicateP1 => NonTermKind::Predicate,
            ProdKind::ObjectP1 => NonTermKind::Object,
            ProdKind::ObjectP2 => NonTermKind::Object,
            ProdKind::DataValueP1 => NonTermKind::DataValue,
            ProdKind::ReferenceP1 => NonTermKind::Reference,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    PrefixLiteralS1,
    ShexmlS2,
    Prefix1S3,
    Prefix0S4,
    PrefixS5,
    NamespaceS6,
    PrefixS7,
    SourceLiteralS8,
    Source1S9,
    Source0S10,
    SourceS11,
    OpenTagS12,
    IdentifierS13,
    SourceS14,
    IteratorLiteralS15,
    Iterator1S16,
    Iterator0S17,
    IteratorS18,
    UriS19,
    OpenTagS20,
    IdentifierS21,
    IteratorS22,
    ExpressionLiteralS23,
    Expression1S24,
    Expression0S25,
    ExpressionS26,
    CloseTagS27,
    UriS28,
    OpenTagS29,
    IdentifierS30,
    ExpressionS31,
    NamespaceS32,
    Shape1S33,
    Shape0S34,
    ShapeS35,
    SubjectS36,
    ClassS37,
    CloseTagS38,
    PathLiteralS39,
    OpenTagS40,
    IdentifierS41,
    ShapeS42,
    OpenBraceS43,
    NamespaceS44,
    SubjectIdentifierS45,
    NamespaceOptS46,
    PathS47,
    IdentifierS48,
    IteratorFileRelation1S49,
    IteratorFileRelationS50,
    NamespaceS51,
    PredicateObject1S52,
    PredicateObject0S53,
    PredicateObjectS54,
    PredicateS55,
    OpenBracketS56,
    CloseTagS57,
    DotS58,
    UnionLiteralS59,
    CloseTagS60,
    IdentifierS61,
    PredicateObjectS62,
    CloseBraceS63,
    AtSignS64,
    NamespaceOptS65,
    ObjectS66,
    DataValueS67,
    ReferenceS68,
    ShapePathS69,
    OpenBraceS70,
    IdentifierS71,
    IteratorFileRelationS72,
    DotsS73,
    OpenBracketS74,
    SemicolonS75,
    CloseBracketS76,
    FieldLiteralS77,
    Attribute1S78,
    AttributeS79,
    IdentifierS80,
    ShapePathS81,
    IdentifierS82,
    IteratorLiteralS83,
    NestedIterator1S84,
    NestedIterator0S85,
    NestedIteratorS86,
    AttributeS87,
    CloseBracketS88,
    OpenTagS89,
    IdentifierS90,
    NestedIteratorS91,
    CloseBraceS92,
    PathS93,
    OpenTagS94,
    CloseTagS95,
    PathS96,
    CloseTagS97,
    OpenBraceS98,
    Attribute1S99,
    NestedIterator0S100,
    CloseBraceS101,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::PrefixLiteralS1 => "1:PrefixLiteral",
            State::ShexmlS2 => "2:Shexml",
            State::Prefix1S3 => "3:Prefix1",
            State::Prefix0S4 => "4:Prefix0",
            State::PrefixS5 => "5:Prefix",
            State::NamespaceS6 => "6:Namespace",
            State::PrefixS7 => "7:Prefix",
            State::SourceLiteralS8 => "8:SourceLiteral",
            State::Source1S9 => "9:Source1",
            State::Source0S10 => "10:Source0",
            State::SourceS11 => "11:Source",
            State::OpenTagS12 => "12:OpenTag",
            State::IdentifierS13 => "13:Identifier",
            State::SourceS14 => "14:Source",
            State::IteratorLiteralS15 => "15:IteratorLiteral",
            State::Iterator1S16 => "16:Iterator1",
            State::Iterator0S17 => "17:Iterator0",
            State::IteratorS18 => "18:Iterator",
            State::UriS19 => "19:Uri",
            State::OpenTagS20 => "20:OpenTag",
            State::IdentifierS21 => "21:Identifier",
            State::IteratorS22 => "22:Iterator",
            State::ExpressionLiteralS23 => "23:ExpressionLiteral",
            State::Expression1S24 => "24:Expression1",
            State::Expression0S25 => "25:Expression0",
            State::ExpressionS26 => "26:Expression",
            State::CloseTagS27 => "27:CloseTag",
            State::UriS28 => "28:Uri",
            State::OpenTagS29 => "29:OpenTag",
            State::IdentifierS30 => "30:Identifier",
            State::ExpressionS31 => "31:Expression",
            State::NamespaceS32 => "32:Namespace",
            State::Shape1S33 => "33:Shape1",
            State::Shape0S34 => "34:Shape0",
            State::ShapeS35 => "35:Shape",
            State::SubjectS36 => "36:Subject",
            State::ClassS37 => "37:Class",
            State::CloseTagS38 => "38:CloseTag",
            State::PathLiteralS39 => "39:PathLiteral",
            State::OpenTagS40 => "40:OpenTag",
            State::IdentifierS41 => "41:Identifier",
            State::ShapeS42 => "42:Shape",
            State::OpenBraceS43 => "43:OpenBrace",
            State::NamespaceS44 => "44:Namespace",
            State::SubjectIdentifierS45 => "45:SubjectIdentifier",
            State::NamespaceOptS46 => "46:NamespaceOpt",
            State::PathS47 => "47:Path",
            State::IdentifierS48 => "48:Identifier",
            State::IteratorFileRelation1S49 => "49:IteratorFileRelation1",
            State::IteratorFileRelationS50 => "50:IteratorFileRelation",
            State::NamespaceS51 => "51:Namespace",
            State::PredicateObject1S52 => "52:PredicateObject1",
            State::PredicateObject0S53 => "53:PredicateObject0",
            State::PredicateObjectS54 => "54:PredicateObject",
            State::PredicateS55 => "55:Predicate",
            State::OpenBracketS56 => "56:OpenBracket",
            State::CloseTagS57 => "57:CloseTag",
            State::DotS58 => "58:Dot",
            State::UnionLiteralS59 => "59:UnionLiteral",
            State::CloseTagS60 => "60:CloseTag",
            State::IdentifierS61 => "61:Identifier",
            State::PredicateObjectS62 => "62:PredicateObject",
            State::CloseBraceS63 => "63:CloseBrace",
            State::AtSignS64 => "64:AtSign",
            State::NamespaceOptS65 => "65:NamespaceOpt",
            State::ObjectS66 => "66:Object",
            State::DataValueS67 => "67:DataValue",
            State::ReferenceS68 => "68:Reference",
            State::ShapePathS69 => "69:ShapePath",
            State::OpenBraceS70 => "70:OpenBrace",
            State::IdentifierS71 => "71:Identifier",
            State::IteratorFileRelationS72 => "72:IteratorFileRelation",
            State::DotsS73 => "73:Dots",
            State::OpenBracketS74 => "74:OpenBracket",
            State::SemicolonS75 => "75:Semicolon",
            State::CloseBracketS76 => "76:CloseBracket",
            State::FieldLiteralS77 => "77:FieldLiteral",
            State::Attribute1S78 => "78:Attribute1",
            State::AttributeS79 => "79:Attribute",
            State::IdentifierS80 => "80:Identifier",
            State::ShapePathS81 => "81:ShapePath",
            State::IdentifierS82 => "82:Identifier",
            State::IteratorLiteralS83 => "83:IteratorLiteral",
            State::NestedIterator1S84 => "84:NestedIterator1",
            State::NestedIterator0S85 => "85:NestedIterator0",
            State::NestedIteratorS86 => "86:NestedIterator",
            State::AttributeS87 => "87:Attribute",
            State::CloseBracketS88 => "88:CloseBracket",
            State::OpenTagS89 => "89:OpenTag",
            State::IdentifierS90 => "90:Identifier",
            State::NestedIteratorS91 => "91:NestedIterator",
            State::CloseBraceS92 => "92:CloseBrace",
            State::PathS93 => "93:Path",
            State::OpenTagS94 => "94:OpenTag",
            State::CloseTagS95 => "95:CloseTag",
            State::PathS96 => "96:Path",
            State::CloseTagS97 => "97:CloseTag",
            State::OpenBraceS98 => "98:OpenBrace",
            State::Attribute1S99 => "99:Attribute1",
            State::NestedIterator0S100 => "100:NestedIterator0",
            State::CloseBraceS101 => "101:CloseBrace",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    PrefixLiteral,
    SourceLiteral,
    IteratorLiteral,
    FieldLiteral,
    ExpressionLiteral,
    UnionLiteral,
    OpenTag,
    CloseTag,
    OpenBrace,
    CloseBrace,
    OpenBracket,
    CloseBracket,
    AtSign,
    Dots,
    Semicolon,
    Namespace(shexml_actions::Namespace),
    Identifier(shexml_actions::Identifier),
    PathLiteral(shexml_actions::PathLiteral),
    Path(shexml_actions::Path),
    ShapePath(shexml_actions::ShapePath),
    Uri(shexml_actions::Uri),
    Dot,
}
#[derive(Debug)]
pub enum NonTerminal {
    Shexml(shexml_actions::Shexml),
    Prefix1(shexml_actions::Prefix1),
    Prefix0(shexml_actions::Prefix0),
    Source1(shexml_actions::Source1),
    Source0(shexml_actions::Source0),
    Iterator1(shexml_actions::Iterator1),
    Iterator0(shexml_actions::Iterator0),
    Expression1(shexml_actions::Expression1),
    Expression0(shexml_actions::Expression0),
    Shape1(shexml_actions::Shape1),
    Shape0(shexml_actions::Shape0),
    Prefix(shexml_actions::Prefix),
    Source(shexml_actions::Source),
    Expression(shexml_actions::Expression),
    IteratorFileRelation1(shexml_actions::IteratorFileRelation1),
    IteratorFileRelation(shexml_actions::IteratorFileRelation),
    Iterator(shexml_actions::Iterator),
    Attribute1(shexml_actions::Attribute1),
    NestedIterator1(shexml_actions::NestedIterator1),
    NestedIterator0(shexml_actions::NestedIterator0),
    NestedIterator(shexml_actions::NestedIterator),
    Attribute(shexml_actions::Attribute),
    Shape(shexml_actions::Shape),
    PredicateObject1(shexml_actions::PredicateObject1),
    PredicateObject0(shexml_actions::PredicateObject0),
    Subject(shexml_actions::Subject),
    Class(shexml_actions::Class),
    SubjectIdentifier(shexml_actions::SubjectIdentifier),
    NamespaceOpt(shexml_actions::NamespaceOpt),
    PredicateObject(shexml_actions::PredicateObject),
    Predicate(shexml_actions::Predicate),
    Object(shexml_actions::Object),
    DataValue(shexml_actions::DataValue),
    Reference(shexml_actions::Reference),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct ShexmlParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Prefix0P2, 0usize)]),
        TK::PrefixLiteral => Vec::from(&[Shift(State::PrefixLiteralS1)]),
        TK::SourceLiteral => Vec::from(&[Reduce(PK::Prefix0P2, 0usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Prefix0P2, 0usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Prefix0P2, 0usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Prefix0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_prefixliteral_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Namespace => Vec::from(&[Shift(State::NamespaceS6)]),
        _ => vec![],
    }
}
fn action_shexml_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_prefix1_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Prefix0P1, 1usize)]),
        TK::PrefixLiteral => Vec::from(&[Shift(State::PrefixLiteralS1)]),
        TK::SourceLiteral => Vec::from(&[Reduce(PK::Prefix0P1, 1usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Prefix0P1, 1usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Prefix0P1, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Prefix0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_prefix0_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Source0P2, 0usize)]),
        TK::SourceLiteral => Vec::from(&[Shift(State::SourceLiteralS8)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Source0P2, 0usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Source0P2, 0usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Source0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_prefix_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Prefix1P2, 1usize)]),
        TK::PrefixLiteral => Vec::from(&[Reduce(PK::Prefix1P2, 1usize)]),
        TK::SourceLiteral => Vec::from(&[Reduce(PK::Prefix1P2, 1usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Prefix1P2, 1usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Prefix1P2, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Prefix1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_namespace_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenTag => Vec::from(&[Shift(State::OpenTagS12)]),
        _ => vec![],
    }
}
fn action_prefix_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Prefix1P1, 2usize)]),
        TK::PrefixLiteral => Vec::from(&[Reduce(PK::Prefix1P1, 2usize)]),
        TK::SourceLiteral => Vec::from(&[Reduce(PK::Prefix1P1, 2usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Prefix1P1, 2usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Prefix1P1, 2usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Prefix1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_sourceliteral_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS13)]),
        _ => vec![],
    }
}
fn action_source1_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Source0P1, 1usize)]),
        TK::SourceLiteral => Vec::from(&[Shift(State::SourceLiteralS8)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Source0P1, 1usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Source0P1, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Source0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_source0_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Iterator0P2, 0usize)]),
        TK::IteratorLiteral => Vec::from(&[Shift(State::IteratorLiteralS15)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Iterator0P2, 0usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Iterator0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_source_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Source1P2, 1usize)]),
        TK::SourceLiteral => Vec::from(&[Reduce(PK::Source1P2, 1usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Source1P2, 1usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Source1P2, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Source1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_opentag_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Uri => Vec::from(&[Shift(State::UriS19)]),
        _ => vec![],
    }
}
fn action_identifier_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenTag => Vec::from(&[Shift(State::OpenTagS20)]),
        _ => vec![],
    }
}
fn action_source_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Source1P1, 2usize)]),
        TK::SourceLiteral => Vec::from(&[Reduce(PK::Source1P1, 2usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Source1P1, 2usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Source1P1, 2usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Source1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_iteratorliteral_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS21)]),
        _ => vec![],
    }
}
fn action_iterator1_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Iterator0P1, 1usize)]),
        TK::IteratorLiteral => Vec::from(&[Shift(State::IteratorLiteralS15)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Iterator0P1, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Iterator0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_iterator0_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Expression0P2, 0usize)]),
        TK::ExpressionLiteral => Vec::from(&[Shift(State::ExpressionLiteralS23)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Expression0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_iterator_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Iterator1P2, 1usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Iterator1P2, 1usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Iterator1P2, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Iterator1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_uri_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseTag => Vec::from(&[Shift(State::CloseTagS27)]),
        _ => vec![],
    }
}
fn action_opentag_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Uri => Vec::from(&[Shift(State::UriS28)]),
        _ => vec![],
    }
}
fn action_identifier_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenTag => Vec::from(&[Shift(State::OpenTagS29)]),
        _ => vec![],
    }
}
fn action_iterator_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Iterator1P1, 2usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Iterator1P1, 2usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Iterator1P1, 2usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Iterator1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_expressionliteral_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS30)]),
        _ => vec![],
    }
}
fn action_expression1_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Expression0P1, 1usize)]),
        TK::ExpressionLiteral => Vec::from(&[Shift(State::ExpressionLiteralS23)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Expression0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_expression0_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Shape0P2, 0usize)]),
        TK::Namespace => Vec::from(&[Shift(State::NamespaceS32)]),
        _ => vec![],
    }
}
fn action_expression_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Expression1P2, 1usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Expression1P2, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Expression1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_closetag_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PrefixP1, 5usize)]),
        TK::PrefixLiteral => Vec::from(&[Reduce(PK::PrefixP1, 5usize)]),
        TK::SourceLiteral => Vec::from(&[Reduce(PK::PrefixP1, 5usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::PrefixP1, 5usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::PrefixP1, 5usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::PrefixP1, 5usize)]),
        _ => vec![],
    }
}
fn action_uri_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseTag => Vec::from(&[Shift(State::CloseTagS38)]),
        _ => vec![],
    }
}
fn action_opentag_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::PathLiteral => Vec::from(&[Shift(State::PathLiteralS39)]),
        _ => vec![],
    }
}
fn action_identifier_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenTag => Vec::from(&[Shift(State::OpenTagS40)]),
        _ => vec![],
    }
}
fn action_expression_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Expression1P1, 2usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::Expression1P1, 2usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Expression1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_namespace_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS41)]),
        _ => vec![],
    }
}
fn action_shape1_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Shape0P1, 1usize)]),
        TK::Namespace => Vec::from(&[Shift(State::NamespaceS32)]),
        _ => vec![],
    }
}
fn action_shape0_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ShexmlP1, 5usize)]),
        _ => vec![],
    }
}
fn action_shape_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Shape1P2, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Shape1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_subject_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBrace => Vec::from(&[Shift(State::OpenBraceS43)]),
        _ => vec![],
    }
}
fn action_class_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBracket => Vec::from(&[Reduce(PK::NamespaceOptP2, 0usize)]),
        TK::Namespace => Vec::from(&[Shift(State::NamespaceS44)]),
        _ => vec![],
    }
}
fn action_closetag_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::SourceP1, 5usize)]),
        TK::SourceLiteral => Vec::from(&[Reduce(PK::SourceP1, 5usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::SourceP1, 5usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::SourceP1, 5usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::SourceP1, 5usize)]),
        _ => vec![],
    }
}
fn action_pathliteral_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Path => Vec::from(&[Shift(State::PathS47)]),
        _ => vec![],
    }
}
fn action_opentag_s40(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS48)]),
        _ => vec![],
    }
}
fn action_identifier_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBracket => Vec::from(&[Reduce(PK::ClassP1, 2usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::ClassP1, 2usize)]),
        _ => vec![],
    }
}
fn action_shape_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Shape1P1, 2usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::Shape1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_openbrace_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBrace => Vec::from(&[Reduce(PK::PredicateObject0P2, 0usize)]),
        TK::Namespace => Vec::from(&[Shift(State::NamespaceS51)]),
        _ => vec![],
    }
}
fn action_namespace_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBracket => Vec::from(&[Reduce(PK::NamespaceOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_subjectidentifier_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBrace => Vec::from(&[Reduce(PK::SubjectP1, 2usize)]),
        _ => vec![],
    }
}
fn action_namespaceopt_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBracket => Vec::from(&[Shift(State::OpenBracketS56)]),
        _ => vec![],
    }
}
fn action_path_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseTag => Vec::from(&[Shift(State::CloseTagS57)]),
        _ => vec![],
    }
}
fn action_identifier_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Dot => Vec::from(&[Shift(State::DotS58)]),
        _ => vec![],
    }
}
fn action_iteratorfilerelation1_s49(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::UnionLiteral => Vec::from(&[Shift(State::UnionLiteralS59)]),
        TK::CloseTag => Vec::from(&[Shift(State::CloseTagS60)]),
        _ => vec![],
    }
}
fn action_iteratorfilerelation_s50(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::UnionLiteral => Vec::from(&[Reduce(PK::IteratorFileRelation1P2, 1usize)]),
        TK::CloseTag => Vec::from(&[Reduce(PK::IteratorFileRelation1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_namespace_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS61)]),
        _ => vec![],
    }
}
fn action_predicateobject1_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBrace => Vec::from(&[Reduce(PK::PredicateObject0P1, 1usize)]),
        TK::Namespace => Vec::from(&[Shift(State::NamespaceS51)]),
        _ => vec![],
    }
}
fn action_predicateobject0_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBrace => Vec::from(&[Shift(State::CloseBraceS63)]),
        _ => vec![],
    }
}
fn action_predicateobject_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBrace => Vec::from(&[Reduce(PK::PredicateObject1P2, 1usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::PredicateObject1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_predicate_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBracket => Vec::from(&[Reduce(PK::NamespaceOptP2, 0usize)]),
        TK::AtSign => Vec::from(&[Shift(State::AtSignS64)]),
        TK::Namespace => Vec::from(&[Shift(State::NamespaceS44)]),
        _ => vec![],
    }
}
fn action_openbracket_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::ShapePath => Vec::from(&[Shift(State::ShapePathS69)]),
        _ => vec![],
    }
}
fn action_closetag_s57(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBrace => Vec::from(&[Shift(State::OpenBraceS70)]),
        _ => vec![],
    }
}
fn action_dot_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS71)]),
        _ => vec![],
    }
}
fn action_unionliteral_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS48)]),
        _ => vec![],
    }
}
fn action_closetag_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExpressionP1, 5usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::ExpressionP1, 5usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::ExpressionP1, 5usize)]),
        _ => vec![],
    }
}
fn action_identifier_s61(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBracket => Vec::from(&[Reduce(PK::PredicateP1, 2usize)]),
        TK::AtSign => Vec::from(&[Reduce(PK::PredicateP1, 2usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::PredicateP1, 2usize)]),
        _ => vec![],
    }
}
fn action_predicateobject_s62(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBrace => Vec::from(&[Reduce(PK::PredicateObject1P1, 2usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::PredicateObject1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_closebrace_s63(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ShapeP1, 4usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::ShapeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_atsign_s64(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Dots => Vec::from(&[Shift(State::DotsS73)]),
        _ => vec![],
    }
}
fn action_namespaceopt_s65(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBracket => Vec::from(&[Shift(State::OpenBracketS74)]),
        _ => vec![],
    }
}
fn action_object_s66(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS75)]),
        _ => vec![],
    }
}
fn action_datavalue_s67(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Reduce(PK::ObjectP1, 1usize)]),
        _ => vec![],
    }
}
fn action_reference_s68(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Reduce(PK::ObjectP2, 1usize)]),
        _ => vec![],
    }
}
fn action_shapepath_s69(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBracket => Vec::from(&[Shift(State::CloseBracketS76)]),
        _ => vec![],
    }
}
fn action_openbrace_s70(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::FieldLiteral => Vec::from(&[Shift(State::FieldLiteralS77)]),
        _ => vec![],
    }
}
fn action_identifier_s71(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::UnionLiteral => Vec::from(&[Reduce(PK::IteratorFileRelationP1, 3usize)]),
        TK::CloseTag => Vec::from(&[Reduce(PK::IteratorFileRelationP1, 3usize)]),
        _ => vec![],
    }
}
fn action_iteratorfilerelation_s72(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::UnionLiteral => Vec::from(&[Reduce(PK::IteratorFileRelation1P1, 3usize)]),
        TK::CloseTag => Vec::from(&[Reduce(PK::IteratorFileRelation1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_dots_s73(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS80)]),
        _ => vec![],
    }
}
fn action_openbracket_s74(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::ShapePath => Vec::from(&[Shift(State::ShapePathS81)]),
        _ => vec![],
    }
}
fn action_semicolon_s75(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBrace => Vec::from(&[Reduce(PK::PredicateObjectP1, 3usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::PredicateObjectP1, 3usize)]),
        _ => vec![],
    }
}
fn action_closebracket_s76(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBrace => Vec::from(&[Reduce(PK::SubjectIdentifierP1, 4usize)]),
        _ => vec![],
    }
}
fn action_fieldliteral_s77(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS82)]),
        _ => vec![],
    }
}
fn action_attribute1_s78(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Shift(State::IteratorLiteralS83)]),
        TK::FieldLiteral => Vec::from(&[Shift(State::FieldLiteralS77)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::NestedIterator0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_attribute_s79(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Attribute1P2, 1usize)]),
        TK::FieldLiteral => Vec::from(&[Reduce(PK::Attribute1P2, 1usize)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::Attribute1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s80(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Reduce(PK::ReferenceP1, 3usize)]),
        _ => vec![],
    }
}
fn action_shapepath_s81(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBracket => Vec::from(&[Shift(State::CloseBracketS88)]),
        _ => vec![],
    }
}
fn action_identifier_s82(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenTag => Vec::from(&[Shift(State::OpenTagS89)]),
        _ => vec![],
    }
}
fn action_iteratorliteral_s83(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS90)]),
        _ => vec![],
    }
}
fn action_nestediterator1_s84(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Shift(State::IteratorLiteralS83)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::NestedIterator0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_nestediterator0_s85(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBrace => Vec::from(&[Shift(State::CloseBraceS92)]),
        _ => vec![],
    }
}
fn action_nestediterator_s86(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::NestedIterator1P2, 1usize)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::NestedIterator1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_attribute_s87(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::Attribute1P1, 2usize)]),
        TK::FieldLiteral => Vec::from(&[Reduce(PK::Attribute1P1, 2usize)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::Attribute1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_closebracket_s88(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Reduce(PK::DataValueP1, 4usize)]),
        _ => vec![],
    }
}
fn action_opentag_s89(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Path => Vec::from(&[Shift(State::PathS93)]),
        _ => vec![],
    }
}
fn action_identifier_s90(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenTag => Vec::from(&[Shift(State::OpenTagS94)]),
        _ => vec![],
    }
}
fn action_nestediterator_s91(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::NestedIterator1P1, 2usize)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::NestedIterator1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_closebrace_s92(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::IteratorP1, 10usize)]),
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::IteratorP1, 10usize)]),
        TK::ExpressionLiteral => Vec::from(&[Reduce(PK::IteratorP1, 10usize)]),
        TK::Namespace => Vec::from(&[Reduce(PK::IteratorP1, 10usize)]),
        _ => vec![],
    }
}
fn action_path_s93(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseTag => Vec::from(&[Shift(State::CloseTagS95)]),
        _ => vec![],
    }
}
fn action_opentag_s94(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Path => Vec::from(&[Shift(State::PathS96)]),
        _ => vec![],
    }
}
fn action_closetag_s95(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::AttributeP1, 5usize)]),
        TK::FieldLiteral => Vec::from(&[Reduce(PK::AttributeP1, 5usize)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::AttributeP1, 5usize)]),
        _ => vec![],
    }
}
fn action_path_s96(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseTag => Vec::from(&[Shift(State::CloseTagS97)]),
        _ => vec![],
    }
}
fn action_closetag_s97(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OpenBrace => Vec::from(&[Shift(State::OpenBraceS98)]),
        _ => vec![],
    }
}
fn action_openbrace_s98(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::FieldLiteral => Vec::from(&[Shift(State::FieldLiteralS77)]),
        _ => vec![],
    }
}
fn action_attribute1_s99(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Shift(State::IteratorLiteralS83)]),
        TK::FieldLiteral => Vec::from(&[Shift(State::FieldLiteralS77)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::NestedIterator0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_nestediterator0_s100(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseBrace => Vec::from(&[Shift(State::CloseBraceS101)]),
        _ => vec![],
    }
}
fn action_closebrace_s101(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IteratorLiteral => Vec::from(&[Reduce(PK::NestedIteratorP1, 9usize)]),
        TK::CloseBrace => Vec::from(&[Reduce(PK::NestedIteratorP1, 9usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Shexml => State::ShexmlS2,
        NonTermKind::Prefix1 => State::Prefix1S3,
        NonTermKind::Prefix0 => State::Prefix0S4,
        NonTermKind::Prefix => State::PrefixS5,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_prefix1_s3(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Prefix => State::PrefixS7,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Prefix1S3
            )
        }
    }
}
fn goto_prefix0_s4(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Source1 => State::Source1S9,
        NonTermKind::Source0 => State::Source0S10,
        NonTermKind::Source => State::SourceS11,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Prefix0S4
            )
        }
    }
}
fn goto_source1_s9(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Source => State::SourceS14,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Source1S9
            )
        }
    }
}
fn goto_source0_s10(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Iterator1 => State::Iterator1S16,
        NonTermKind::Iterator0 => State::Iterator0S17,
        NonTermKind::Iterator => State::IteratorS18,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Source0S10
            )
        }
    }
}
fn goto_iterator1_s16(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Iterator => State::IteratorS22,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Iterator1S16
            )
        }
    }
}
fn goto_iterator0_s17(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression1 => State::Expression1S24,
        NonTermKind::Expression0 => State::Expression0S25,
        NonTermKind::Expression => State::ExpressionS26,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Iterator0S17
            )
        }
    }
}
fn goto_expression1_s24(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS31,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Expression1S24
            )
        }
    }
}
fn goto_expression0_s25(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Shape1 => State::Shape1S33,
        NonTermKind::Shape0 => State::Shape0S34,
        NonTermKind::Shape => State::ShapeS35,
        NonTermKind::Subject => State::SubjectS36,
        NonTermKind::Class => State::ClassS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Expression0S25
            )
        }
    }
}
fn goto_shape1_s33(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Shape => State::ShapeS42,
        NonTermKind::Subject => State::SubjectS36,
        NonTermKind::Class => State::ClassS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Shape1S33
            )
        }
    }
}
fn goto_class_s37(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SubjectIdentifier => State::SubjectIdentifierS45,
        NonTermKind::NamespaceOpt => State::NamespaceOptS46,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ClassS37
            )
        }
    }
}
fn goto_opentag_s40(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IteratorFileRelation1 => State::IteratorFileRelation1S49,
        NonTermKind::IteratorFileRelation => State::IteratorFileRelationS50,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OpenTagS40
            )
        }
    }
}
fn goto_openbrace_s43(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::PredicateObject1 => State::PredicateObject1S52,
        NonTermKind::PredicateObject0 => State::PredicateObject0S53,
        NonTermKind::PredicateObject => State::PredicateObjectS54,
        NonTermKind::Predicate => State::PredicateS55,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OpenBraceS43
            )
        }
    }
}
fn goto_predicateobject1_s52(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::PredicateObject => State::PredicateObjectS62,
        NonTermKind::Predicate => State::PredicateS55,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PredicateObject1S52
            )
        }
    }
}
fn goto_predicate_s55(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::NamespaceOpt => State::NamespaceOptS65,
        NonTermKind::Object => State::ObjectS66,
        NonTermKind::DataValue => State::DataValueS67,
        NonTermKind::Reference => State::ReferenceS68,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PredicateS55
            )
        }
    }
}
fn goto_unionliteral_s59(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IteratorFileRelation => State::IteratorFileRelationS72,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::UnionLiteralS59
            )
        }
    }
}
fn goto_openbrace_s70(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Attribute1 => State::Attribute1S78,
        NonTermKind::Attribute => State::AttributeS79,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OpenBraceS70
            )
        }
    }
}
fn goto_attribute1_s78(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::NestedIterator1 => State::NestedIterator1S84,
        NonTermKind::NestedIterator0 => State::NestedIterator0S85,
        NonTermKind::NestedIterator => State::NestedIteratorS86,
        NonTermKind::Attribute => State::AttributeS87,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Attribute1S78
            )
        }
    }
}
fn goto_nestediterator1_s84(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::NestedIterator => State::NestedIteratorS91,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::NestedIterator1S84
            )
        }
    }
}
fn goto_openbrace_s98(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Attribute1 => State::Attribute1S99,
        NonTermKind::Attribute => State::AttributeS79,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OpenBraceS98
            )
        }
    }
}
fn goto_attribute1_s99(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::NestedIterator1 => State::NestedIterator1S84,
        NonTermKind::NestedIterator0 => State::NestedIterator0S100,
        NonTermKind::NestedIterator => State::NestedIteratorS86,
        NonTermKind::Attribute => State::AttributeS87,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Attribute1S99
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: ShexmlParserDefinition = ShexmlParserDefinition {
    actions: [
        action_aug_s0,
        action_prefixliteral_s1,
        action_shexml_s2,
        action_prefix1_s3,
        action_prefix0_s4,
        action_prefix_s5,
        action_namespace_s6,
        action_prefix_s7,
        action_sourceliteral_s8,
        action_source1_s9,
        action_source0_s10,
        action_source_s11,
        action_opentag_s12,
        action_identifier_s13,
        action_source_s14,
        action_iteratorliteral_s15,
        action_iterator1_s16,
        action_iterator0_s17,
        action_iterator_s18,
        action_uri_s19,
        action_opentag_s20,
        action_identifier_s21,
        action_iterator_s22,
        action_expressionliteral_s23,
        action_expression1_s24,
        action_expression0_s25,
        action_expression_s26,
        action_closetag_s27,
        action_uri_s28,
        action_opentag_s29,
        action_identifier_s30,
        action_expression_s31,
        action_namespace_s32,
        action_shape1_s33,
        action_shape0_s34,
        action_shape_s35,
        action_subject_s36,
        action_class_s37,
        action_closetag_s38,
        action_pathliteral_s39,
        action_opentag_s40,
        action_identifier_s41,
        action_shape_s42,
        action_openbrace_s43,
        action_namespace_s44,
        action_subjectidentifier_s45,
        action_namespaceopt_s46,
        action_path_s47,
        action_identifier_s48,
        action_iteratorfilerelation1_s49,
        action_iteratorfilerelation_s50,
        action_namespace_s51,
        action_predicateobject1_s52,
        action_predicateobject0_s53,
        action_predicateobject_s54,
        action_predicate_s55,
        action_openbracket_s56,
        action_closetag_s57,
        action_dot_s58,
        action_unionliteral_s59,
        action_closetag_s60,
        action_identifier_s61,
        action_predicateobject_s62,
        action_closebrace_s63,
        action_atsign_s64,
        action_namespaceopt_s65,
        action_object_s66,
        action_datavalue_s67,
        action_reference_s68,
        action_shapepath_s69,
        action_openbrace_s70,
        action_identifier_s71,
        action_iteratorfilerelation_s72,
        action_dots_s73,
        action_openbracket_s74,
        action_semicolon_s75,
        action_closebracket_s76,
        action_fieldliteral_s77,
        action_attribute1_s78,
        action_attribute_s79,
        action_identifier_s80,
        action_shapepath_s81,
        action_identifier_s82,
        action_iteratorliteral_s83,
        action_nestediterator1_s84,
        action_nestediterator0_s85,
        action_nestediterator_s86,
        action_attribute_s87,
        action_closebracket_s88,
        action_opentag_s89,
        action_identifier_s90,
        action_nestediterator_s91,
        action_closebrace_s92,
        action_path_s93,
        action_opentag_s94,
        action_closetag_s95,
        action_path_s96,
        action_closetag_s97,
        action_openbrace_s98,
        action_attribute1_s99,
        action_nestediterator0_s100,
        action_closebrace_s101,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_invalid,
        goto_prefix1_s3,
        goto_prefix0_s4,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_source1_s9,
        goto_source0_s10,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_iterator1_s16,
        goto_iterator0_s17,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_expression1_s24,
        goto_expression0_s25,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_shape1_s33,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_class_s37,
        goto_invalid,
        goto_invalid,
        goto_opentag_s40,
        goto_invalid,
        goto_invalid,
        goto_openbrace_s43,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_predicateobject1_s52,
        goto_invalid,
        goto_invalid,
        goto_predicate_s55,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_unionliteral_s59,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_openbrace_s70,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_attribute1_s78,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_nestediterator1_s84,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_openbrace_s98,
        goto_attribute1_s99,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::PrefixLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
        ],
        [Some((TK::Namespace, false)), None, None, None, None, None],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::PrefixLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::PrefixLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
        ],
        [Some((TK::OpenTag, true)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::PrefixLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
        ],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
            None,
        ],
        [Some((TK::Uri, false)), None, None, None, None, None],
        [Some((TK::OpenTag, true)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
            None,
        ],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
        ],
        [Some((TK::CloseTag, true)), None, None, None, None, None],
        [Some((TK::Uri, false)), None, None, None, None, None],
        [Some((TK::OpenTag, true)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
        ],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
        ],
        [Some((TK::STOP, true)), Some((TK::Namespace, false)), None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::PrefixLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
        ],
        [Some((TK::CloseTag, true)), None, None, None, None, None],
        [Some((TK::PathLiteral, false)), None, None, None, None, None],
        [Some((TK::OpenTag, true)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
        ],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [Some((TK::STOP, true)), Some((TK::Namespace, false)), None, None, None, None],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [Some((TK::STOP, true)), Some((TK::Namespace, false)), None, None, None, None],
        [Some((TK::OpenBrace, true)), None, None, None, None, None],
        [
            Some((TK::OpenBracket, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::SourceLiteral, true)),
            Some((TK::Namespace, false)),
            None,
        ],
        [Some((TK::Path, false)), None, None, None, None, None],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [
            Some((TK::OpenBracket, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::STOP, true)), Some((TK::Namespace, false)), None, None, None, None],
        [
            Some((TK::CloseBrace, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::OpenBracket, true)), None, None, None, None, None],
        [Some((TK::OpenBrace, true)), None, None, None, None, None],
        [Some((TK::OpenBracket, true)), None, None, None, None, None],
        [Some((TK::CloseTag, true)), None, None, None, None, None],
        [Some((TK::Dot, true)), None, None, None, None, None],
        [
            Some((TK::UnionLiteral, true)),
            Some((TK::CloseTag, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::UnionLiteral, true)),
            Some((TK::CloseTag, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [
            Some((TK::CloseBrace, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::CloseBrace, true)), None, None, None, None, None],
        [
            Some((TK::CloseBrace, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OpenBracket, true)),
            Some((TK::AtSign, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
        ],
        [Some((TK::ShapePath, false)), None, None, None, None, None],
        [Some((TK::OpenBrace, true)), None, None, None, None, None],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::OpenBracket, true)),
            Some((TK::AtSign, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CloseBrace, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::STOP, true)), Some((TK::Namespace, false)), None, None, None, None],
        [Some((TK::Dots, true)), None, None, None, None, None],
        [Some((TK::OpenBracket, true)), None, None, None, None, None],
        [Some((TK::Semicolon, true)), None, None, None, None, None],
        [Some((TK::Semicolon, true)), None, None, None, None, None],
        [Some((TK::Semicolon, true)), None, None, None, None, None],
        [Some((TK::CloseBracket, true)), None, None, None, None, None],
        [Some((TK::FieldLiteral, true)), None, None, None, None, None],
        [
            Some((TK::UnionLiteral, true)),
            Some((TK::CloseTag, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::UnionLiteral, true)),
            Some((TK::CloseTag, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [Some((TK::ShapePath, false)), None, None, None, None, None],
        [
            Some((TK::CloseBrace, true)),
            Some((TK::Namespace, false)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::OpenBrace, true)), None, None, None, None, None],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::FieldLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::FieldLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
        ],
        [Some((TK::Semicolon, true)), None, None, None, None, None],
        [Some((TK::CloseBracket, true)), None, None, None, None, None],
        [Some((TK::OpenTag, true)), None, None, None, None, None],
        [Some((TK::Identifier, false)), None, None, None, None, None],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::CloseBrace, true)), None, None, None, None, None],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::FieldLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
        ],
        [Some((TK::Semicolon, true)), None, None, None, None, None],
        [Some((TK::Path, false)), None, None, None, None, None],
        [Some((TK::OpenTag, true)), None, None, None, None, None],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::ExpressionLiteral, true)),
            Some((TK::IteratorLiteral, true)),
            Some((TK::Namespace, false)),
            None,
            None,
        ],
        [Some((TK::CloseTag, true)), None, None, None, None, None],
        [Some((TK::Path, false)), None, None, None, None, None],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::FieldLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
        ],
        [Some((TK::CloseTag, true)), None, None, None, None, None],
        [Some((TK::OpenBrace, true)), None, None, None, None, None],
        [Some((TK::FieldLiteral, true)), None, None, None, None, None],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::FieldLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
        ],
        [Some((TK::CloseBrace, true)), None, None, None, None, None],
        [
            Some((TK::IteratorLiteral, true)),
            Some((TK::CloseBrace, true)),
            None,
            None,
            None,
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for ShexmlParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct ShexmlParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        ShexmlParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<
    'i,
> ShexmlParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    DefaultBuilder,
> {
    pub fn new() -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                false,
                StringLexer::new(true, &RECOGNIZERS),
                DefaultBuilder::new(),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for ShexmlParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    _ => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(TokenKind::PrefixLiteral, Recognizer::StrMatch("PREFIX")),
    TokenRecognizer(TokenKind::SourceLiteral, Recognizer::StrMatch("SOURCE")),
    TokenRecognizer(TokenKind::IteratorLiteral, Recognizer::StrMatch("ITERATOR")),
    TokenRecognizer(TokenKind::FieldLiteral, Recognizer::StrMatch("FIELD")),
    TokenRecognizer(TokenKind::ExpressionLiteral, Recognizer::StrMatch("EXPRESSION")),
    TokenRecognizer(TokenKind::UnionLiteral, Recognizer::StrMatch("UNION")),
    TokenRecognizer(TokenKind::OpenTag, Recognizer::StrMatch("<")),
    TokenRecognizer(TokenKind::CloseTag, Recognizer::StrMatch(">")),
    TokenRecognizer(TokenKind::OpenBrace, Recognizer::StrMatch("{")),
    TokenRecognizer(TokenKind::CloseBrace, Recognizer::StrMatch("}")),
    TokenRecognizer(TokenKind::OpenBracket, Recognizer::StrMatch("[")),
    TokenRecognizer(TokenKind::CloseBracket, Recognizer::StrMatch("]")),
    TokenRecognizer(TokenKind::AtSign, Recognizer::StrMatch("@")),
    TokenRecognizer(TokenKind::Dots, Recognizer::StrMatch(":")),
    TokenRecognizer(TokenKind::Semicolon, Recognizer::StrMatch(";")),
    TokenRecognizer(
        TokenKind::Namespace,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "[a-zA-Z0-9\\-_]*:")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::Identifier,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "[a-zA-Z0-9\\-_]*")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::PathLiteral,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "xpath:|jsonpath:")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::Path,
        Recognizer::RegexMatch(
            Lazy::new(|| {
                Regex::new(concat!("^", "[/.@\\$\\[\\]a-zA-Z0-9_\\*\\-'\"]+")).unwrap()
            }),
        ),
    ),
    TokenRecognizer(
        TokenKind::ShapePath,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "[/.a-zA-Z0-9_\\*\\-]+")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::Uri,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "https?://[^\\s<>\"]+")).unwrap() }),
        ),
    ),
    TokenRecognizer(TokenKind::Dot, Recognizer::StrMatch(".")),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = shexml_actions::Shexml;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Shexml(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::PrefixLiteral => Terminal::PrefixLiteral,
            TokenKind::SourceLiteral => Terminal::SourceLiteral,
            TokenKind::IteratorLiteral => Terminal::IteratorLiteral,
            TokenKind::FieldLiteral => Terminal::FieldLiteral,
            TokenKind::ExpressionLiteral => Terminal::ExpressionLiteral,
            TokenKind::UnionLiteral => Terminal::UnionLiteral,
            TokenKind::OpenTag => Terminal::OpenTag,
            TokenKind::CloseTag => Terminal::CloseTag,
            TokenKind::OpenBrace => Terminal::OpenBrace,
            TokenKind::CloseBrace => Terminal::CloseBrace,
            TokenKind::OpenBracket => Terminal::OpenBracket,
            TokenKind::CloseBracket => Terminal::CloseBracket,
            TokenKind::AtSign => Terminal::AtSign,
            TokenKind::Dots => Terminal::Dots,
            TokenKind::Semicolon => Terminal::Semicolon,
            TokenKind::Namespace => {
                Terminal::Namespace(shexml_actions::namespace(context, token))
            }
            TokenKind::Identifier => {
                Terminal::Identifier(shexml_actions::identifier(context, token))
            }
            TokenKind::PathLiteral => {
                Terminal::PathLiteral(shexml_actions::path_literal(context, token))
            }
            TokenKind::Path => Terminal::Path(shexml_actions::path(context, token)),
            TokenKind::ShapePath => {
                Terminal::ShapePath(shexml_actions::shape_path(context, token))
            }
            TokenKind::Uri => Terminal::Uri(shexml_actions::uri(context, token)),
            TokenKind::Dot => Terminal::Dot,
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &Context<'i, Input>,
        prod: ProdKind,
        prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::ShexmlP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::Prefix0(p0)),
                        Symbol::NonTerminal(NonTerminal::Source0(p1)),
                        Symbol::NonTerminal(NonTerminal::Iterator0(p2)),
                        Symbol::NonTerminal(NonTerminal::Expression0(p3)),
                        Symbol::NonTerminal(NonTerminal::Shape0(p4)),
                    ) => {
                        NonTerminal::Shexml(
                            shexml_actions::shexml_c1(context, p0, p1, p2, p3, p4),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Prefix1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Prefix1(p0)),
                        Symbol::NonTerminal(NonTerminal::Prefix(p1)),
                    ) => {
                        NonTerminal::Prefix1(shexml_actions::prefix1_c1(context, p0, p1))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Prefix1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Prefix(p0)) => {
                        NonTerminal::Prefix1(shexml_actions::prefix1_prefix(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Prefix0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Prefix1(p0)) => {
                        NonTerminal::Prefix0(
                            shexml_actions::prefix0_prefix1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Prefix0P2 => {
                NonTerminal::Prefix0(shexml_actions::prefix0_empty(context))
            }
            ProdKind::Source1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Source1(p0)),
                        Symbol::NonTerminal(NonTerminal::Source(p1)),
                    ) => {
                        NonTerminal::Source1(shexml_actions::source1_c1(context, p0, p1))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Source1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Source(p0)) => {
                        NonTerminal::Source1(shexml_actions::source1_source(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Source0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Source1(p0)) => {
                        NonTerminal::Source0(
                            shexml_actions::source0_source1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Source0P2 => {
                NonTerminal::Source0(shexml_actions::source0_empty(context))
            }
            ProdKind::Iterator1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Iterator1(p0)),
                        Symbol::NonTerminal(NonTerminal::Iterator(p1)),
                    ) => {
                        NonTerminal::Iterator1(
                            shexml_actions::iterator1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Iterator1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Iterator(p0)) => {
                        NonTerminal::Iterator1(
                            shexml_actions::iterator1_iterator(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Iterator0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Iterator1(p0)) => {
                        NonTerminal::Iterator0(
                            shexml_actions::iterator0_iterator1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Iterator0P2 => {
                NonTerminal::Iterator0(shexml_actions::iterator0_empty(context))
            }
            ProdKind::Expression1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression1(p0)),
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::Expression1(
                            shexml_actions::expression1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Expression1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Expression(p0)) => {
                        NonTerminal::Expression1(
                            shexml_actions::expression1_expression(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Expression0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Expression1(p0)) => {
                        NonTerminal::Expression0(
                            shexml_actions::expression0_expression1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Expression0P2 => {
                NonTerminal::Expression0(shexml_actions::expression0_empty(context))
            }
            ProdKind::Shape1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Shape1(p0)),
                        Symbol::NonTerminal(NonTerminal::Shape(p1)),
                    ) => NonTerminal::Shape1(shexml_actions::shape1_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Shape1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Shape(p0)) => {
                        NonTerminal::Shape1(shexml_actions::shape1_shape(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Shape0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Shape1(p0)) => {
                        NonTerminal::Shape0(shexml_actions::shape0_shape1(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Shape0P2 => {
                NonTerminal::Shape0(shexml_actions::shape0_empty(context))
            }
            ProdKind::PrefixP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::Terminal(Terminal::Namespace(p0)),
                        _,
                        Symbol::Terminal(Terminal::Uri(p1)),
                        _,
                    ) => NonTerminal::Prefix(shexml_actions::prefix_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SourceP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::Terminal(Terminal::Identifier(p0)),
                        _,
                        Symbol::Terminal(Terminal::Uri(p1)),
                        _,
                    ) => NonTerminal::Source(shexml_actions::source_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::Terminal(Terminal::Identifier(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::IteratorFileRelation1(p1)),
                        _,
                    ) => {
                        NonTerminal::Expression(
                            shexml_actions::expression_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IteratorFileRelation1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::IteratorFileRelation1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::IteratorFileRelation(p1)),
                    ) => {
                        NonTerminal::IteratorFileRelation1(
                            shexml_actions::iterator_file_relation1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IteratorFileRelation1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::IteratorFileRelation(p0)) => {
                        NonTerminal::IteratorFileRelation1(
                            shexml_actions::iterator_file_relation1_iterator_file_relation(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IteratorFileRelationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Identifier(p0)),
                        _,
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::IteratorFileRelation(
                            shexml_actions::iterator_file_relation_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IteratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 10usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::Terminal(Terminal::Identifier(p0)),
                        _,
                        Symbol::Terminal(Terminal::PathLiteral(p1)),
                        Symbol::Terminal(Terminal::Path(p2)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Attribute1(p3)),
                        Symbol::NonTerminal(NonTerminal::NestedIterator0(p4)),
                        _,
                    ) => {
                        NonTerminal::Iterator(
                            shexml_actions::iterator_c1(context, p0, p1, p2, p3, p4),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Attribute1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Attribute1(p0)),
                        Symbol::NonTerminal(NonTerminal::Attribute(p1)),
                    ) => {
                        NonTerminal::Attribute1(
                            shexml_actions::attribute1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Attribute1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Attribute(p0)) => {
                        NonTerminal::Attribute1(
                            shexml_actions::attribute1_attribute(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NestedIterator1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::NestedIterator1(p0)),
                        Symbol::NonTerminal(NonTerminal::NestedIterator(p1)),
                    ) => {
                        NonTerminal::NestedIterator1(
                            shexml_actions::nested_iterator1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NestedIterator1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::NestedIterator(p0)) => {
                        NonTerminal::NestedIterator1(
                            shexml_actions::nested_iterator1_nested_iterator(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NestedIterator0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::NestedIterator1(p0)) => {
                        NonTerminal::NestedIterator0(
                            shexml_actions::nested_iterator0_nested_iterator1(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NestedIterator0P2 => {
                NonTerminal::NestedIterator0(
                    shexml_actions::nested_iterator0_empty(context),
                )
            }
            ProdKind::NestedIteratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 9usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::Terminal(Terminal::Identifier(p0)),
                        _,
                        Symbol::Terminal(Terminal::Path(p1)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Attribute1(p2)),
                        Symbol::NonTerminal(NonTerminal::NestedIterator0(p3)),
                        _,
                    ) => {
                        NonTerminal::NestedIterator(
                            shexml_actions::nested_iterator_c1(context, p0, p1, p2, p3),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AttributeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::Terminal(Terminal::Identifier(p0)),
                        _,
                        Symbol::Terminal(Terminal::Path(p1)),
                        _,
                    ) => {
                        NonTerminal::Attribute(
                            shexml_actions::attribute_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ShapeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::Subject(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::PredicateObject0(p1)),
                        _,
                    ) => NonTerminal::Shape(shexml_actions::shape_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PredicateObject1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::PredicateObject1(p0)),
                        Symbol::NonTerminal(NonTerminal::PredicateObject(p1)),
                    ) => {
                        NonTerminal::PredicateObject1(
                            shexml_actions::predicate_object1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PredicateObject1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::PredicateObject(p0)) => {
                        NonTerminal::PredicateObject1(
                            shexml_actions::predicate_object1_predicate_object(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PredicateObject0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::PredicateObject1(p0)) => {
                        NonTerminal::PredicateObject0(
                            shexml_actions::predicate_object0_predicate_object1(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PredicateObject0P2 => {
                NonTerminal::PredicateObject0(
                    shexml_actions::predicate_object0_empty(context),
                )
            }
            ProdKind::SubjectP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Class(p0)),
                        Symbol::NonTerminal(NonTerminal::SubjectIdentifier(p1)),
                    ) => {
                        NonTerminal::Subject(shexml_actions::subject_c1(context, p0, p1))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ClassP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Namespace(p0)),
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => NonTerminal::Class(shexml_actions::class_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SubjectIdentifierP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::NamespaceOpt(p0)),
                        _,
                        Symbol::Terminal(Terminal::ShapePath(p1)),
                        _,
                    ) => {
                        NonTerminal::SubjectIdentifier(
                            shexml_actions::subject_identifier_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NamespaceOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Namespace(p0)) => {
                        NonTerminal::NamespaceOpt(
                            shexml_actions::namespace_opt_namespace(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NamespaceOptP2 => {
                NonTerminal::NamespaceOpt(shexml_actions::namespace_opt_empty(context))
            }
            ProdKind::PredicateObjectP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Predicate(p0)),
                        Symbol::NonTerminal(NonTerminal::Object(p1)),
                        _,
                    ) => {
                        NonTerminal::PredicateObject(
                            shexml_actions::predicate_object_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PredicateP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Namespace(p0)),
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::Predicate(
                            shexml_actions::predicate_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ObjectP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::DataValue(p0)) => {
                        NonTerminal::Object(
                            shexml_actions::object_data_value(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ObjectP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Reference(p0)) => {
                        NonTerminal::Object(
                            shexml_actions::object_reference(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DataValueP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::NamespaceOpt(p0)),
                        _,
                        Symbol::Terminal(Terminal::ShapePath(p1)),
                        _,
                    ) => {
                        NonTerminal::DataValue(
                            shexml_actions::data_value_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ReferenceP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, _, Symbol::Terminal(Terminal::Identifier(p0))) => {
                        NonTerminal::Reference(shexml_actions::reference_c1(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
